/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables.daos;


import com.scomarlf.generated.tables.Dictionary;
import com.scomarlf.generated.tables.records.DictionaryRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictionaryDao extends DAOImpl<DictionaryRecord, com.scomarlf.generated.tables.pojos.Dictionary, String> {

    /**
     * Create a new DictionaryDao without any configuration
     */
    public DictionaryDao() {
        super(Dictionary.DICTIONARY, com.scomarlf.generated.tables.pojos.Dictionary.class);
    }

    /**
     * Create a new DictionaryDao with an attached configuration
     */
    public DictionaryDao(Configuration configuration) {
        super(Dictionary.DICTIONARY, com.scomarlf.generated.tables.pojos.Dictionary.class, configuration);
    }

    @Override
    public String getId(com.scomarlf.generated.tables.pojos.Dictionary object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchRangeOfId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Dictionary.DICTIONARY.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchById(String... values) {
        return fetch(Dictionary.DICTIONARY.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.scomarlf.generated.tables.pojos.Dictionary fetchOneById(String value) {
        return fetchOne(Dictionary.DICTIONARY.ID, value);
    }

    /**
     * Fetch records that have <code>parentId BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchRangeOfParentid(String lowerInclusive, String upperInclusive) {
        return fetchRange(Dictionary.DICTIONARY.PARENTID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>parentId IN (values)</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchByParentid(String... values) {
        return fetch(Dictionary.DICTIONARY.PARENTID, values);
    }

    /**
     * Fetch records that have <code>label BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchRangeOfLabel(String lowerInclusive, String upperInclusive) {
        return fetchRange(Dictionary.DICTIONARY.LABEL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>label IN (values)</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchByLabel(String... values) {
        return fetch(Dictionary.DICTIONARY.LABEL, values);
    }

    /**
     * Fetch records that have <code>sort BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchRangeOfSort(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Dictionary.DICTIONARY.SORT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>sort IN (values)</code>
     */
    public List<com.scomarlf.generated.tables.pojos.Dictionary> fetchBySort(Integer... values) {
        return fetch(Dictionary.DICTIONARY.SORT, values);
    }
}
