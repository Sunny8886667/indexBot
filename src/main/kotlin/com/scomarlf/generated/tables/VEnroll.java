/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables;


import com.scomarlf.generated.Indexbot;
import com.scomarlf.generated.tables.records.VEnrollRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row16;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UInteger;


/**
 * VIEW
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VEnroll extends TableImpl<VEnrollRecord> {

    private static final long serialVersionUID = -719390443;

    /**
     * The reference instance of <code>indexBot.v_enroll</code>
     */
    public static final VEnroll V_ENROLL = new VEnroll();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<VEnrollRecord> getRecordType() {
        return VEnrollRecord.class;
    }

    /**
     * The column <code>indexBot.v_enroll.id</code>. 主键
     */
    public final TableField<VEnrollRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "主键");

    /**
     * The column <code>indexBot.v_enroll.recordId</code>. 频道/群组/bot  ID
     */
    public final TableField<VEnrollRecord, Long> RECORDID = createField(DSL.name("recordId"), org.jooq.impl.SQLDataType.BIGINT, this, "频道/群组/bot  ID");

    /**
     * The column <code>indexBot.v_enroll.username</code>. 频道\群组\机器人 username
     */
    public final TableField<VEnrollRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "频道\\群组\\机器人 username");

    /**
     * The column <code>indexBot.v_enroll.inviteLink</code>. 私有链接
     */
    public final TableField<VEnrollRecord, String> INVITELINK = createField(DSL.name("inviteLink"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "私有链接");

    /**
     * The column <code>indexBot.v_enroll.title</code>. 名称
     */
    public final TableField<VEnrollRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "名称");

    /**
     * The column <code>indexBot.v_enroll.remark</code>. 简介
     */
    public final TableField<VEnrollRecord, String> REMARK = createField(DSL.name("remark"), org.jooq.impl.SQLDataType.CLOB, this, "简介");

    /**
     * The column <code>indexBot.v_enroll.memberNumber</code>. 成员数量
     */
    public final TableField<VEnrollRecord, Long> MEMBERNUMBER = createField(DSL.name("memberNumber"), org.jooq.impl.SQLDataType.BIGINT, this, "成员数量");

    /**
     * The column <code>indexBot.v_enroll.tag</code>. 标签
     */
    public final TableField<VEnrollRecord, String> TAG = createField(DSL.name("tag"), org.jooq.impl.SQLDataType.VARCHAR(200), this, "标签");

    /**
     * The column <code>indexBot.v_enroll.type</code>. 收录类型 字典-recordType   频道\群组\机器人
     */
    public final TableField<VEnrollRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(20), this, "收录类型 字典-recordType   频道\\群组\\机器人");

    /**
     * The column <code>indexBot.v_enroll.classification</code>. 分类
     */
    public final TableField<VEnrollRecord, String> CLASSIFICATION = createField(DSL.name("classification"), org.jooq.impl.SQLDataType.VARCHAR(10), this, "分类");

    /**
     * The column <code>indexBot.v_enroll.placardId</code>. 公告ID
     */
    public final TableField<VEnrollRecord, Long> PLACARDID = createField(DSL.name("placardId"), org.jooq.impl.SQLDataType.BIGINT, this, "公告ID");

    /**
     * The column <code>indexBot.v_enroll.recordStatus</code>. 是否展示
     */
    public final TableField<VEnrollRecord, Boolean> RECORDSTATUS = createField(DSL.name("recordStatus"), org.jooq.impl.SQLDataType.BIT, this, "是否展示");

    /**
     * The column <code>indexBot.v_enroll.approveStatus</code>.
     */
    public final TableField<VEnrollRecord, UInteger> APPROVESTATUS = createField(DSL.name("approveStatus"), org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>indexBot.v_enroll.status</code>. 是否提交
     */
    public final TableField<VEnrollRecord, Boolean> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.BIT, this, "是否提交");

    /**
     * The column <code>indexBot.v_enroll.createUser</code>. 用户ID
     */
    public final TableField<VEnrollRecord, Long> CREATEUSER = createField(DSL.name("createUser"), org.jooq.impl.SQLDataType.BIGINT, this, "用户ID");

    /**
     * The column <code>indexBot.v_enroll.createTime</code>. 申请时间
     */
    public final TableField<VEnrollRecord, LocalDateTime> CREATETIME = createField(DSL.name("createTime"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "申请时间");

    /**
     * Create a <code>indexBot.v_enroll</code> table reference
     */
    public VEnroll() {
        this(DSL.name("v_enroll"), null);
    }

    /**
     * Create an aliased <code>indexBot.v_enroll</code> table reference
     */
    public VEnroll(String alias) {
        this(DSL.name(alias), V_ENROLL);
    }

    /**
     * Create an aliased <code>indexBot.v_enroll</code> table reference
     */
    public VEnroll(Name alias) {
        this(alias, V_ENROLL);
    }

    private VEnroll(Name alias, Table<VEnrollRecord> aliased) {
        this(alias, aliased, null);
    }

    private VEnroll(Name alias, Table<VEnrollRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("VIEW"), TableOptions.view("create view `v_enroll` as select `e`.`id` AS `id`,`e`.`recordId` AS `recordId`,`r`.`username` AS `username`,`r`.`inviteLink` AS `inviteLink`,`r`.`title` AS `title`,`r`.`remark` AS `remark`,`r`.`memberNumber` AS `memberNumber`,`r`.`tag` AS `tag`,`r`.`type` AS `type`,`r`.`classification` AS `classification`,`r`.`placardId` AS `placardId`,`r`.`status` AS `recordStatus`,(select `indexBot`.`approve`.`status` from `indexBot`.`approve` where (`indexBot`.`approve`.`enrollId` = `r`.`id`)) AS `approveStatus`,`e`.`status` AS `status`,`e`.`createUser` AS `createUser`,`e`.`createTime` AS `createTime` from (`indexBot`.`enroll` `e` left join `indexBot`.`record` `r` on((`e`.`recordId` = `r`.`id`)))"));
    }

    public <O extends Record> VEnroll(Table<O> child, ForeignKey<O, VEnrollRecord> key) {
        super(child, key, V_ENROLL);
    }

    @Override
    public Schema getSchema() {
        return Indexbot.INDEXBOT;
    }

    @Override
    public VEnroll as(String alias) {
        return new VEnroll(DSL.name(alias), this);
    }

    @Override
    public VEnroll as(Name alias) {
        return new VEnroll(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public VEnroll rename(String name) {
        return new VEnroll(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public VEnroll rename(Name name) {
        return new VEnroll(name, null);
    }

    // -------------------------------------------------------------------------
    // Row16 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row16<String, Long, String, String, String, String, Long, String, String, String, Long, Boolean, UInteger, Boolean, Long, LocalDateTime> fieldsRow() {
        return (Row16) super.fieldsRow();
    }
}
