/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables;


import com.scomarlf.generated.Indexbot;
import com.scomarlf.generated.Keys;
import com.scomarlf.generated.tables.records.EcologyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ecology extends TableImpl<EcologyRecord> {

    private static final long serialVersionUID = -2144151695;

    /**
     * The reference instance of <code>indexBot.ecology</code>
     */
    public static final Ecology ECOLOGY = new Ecology();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EcologyRecord> getRecordType() {
        return EcologyRecord.class;
    }

    /**
     * The column <code>indexBot.ecology.id</code>.
     */
    public final TableField<EcologyRecord, String> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>indexBot.ecology.chatId</code>. 群组/频道 ID
     */
    public final TableField<EcologyRecord, Long> CHATID = createField(DSL.name("chatId"), org.jooq.impl.SQLDataType.BIGINT, this, "群组/频道 ID");

    /**
     * The column <code>indexBot.ecology.username</code>. 群组/频道 用户名
     */
    public final TableField<EcologyRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.VARCHAR(150), this, "群组/频道 用户名");

    /**
     * The column <code>indexBot.ecology.description</code>. 描述
     */
    public final TableField<EcologyRecord, String> DESCRIPTION = createField(DSL.name("description"), org.jooq.impl.SQLDataType.VARCHAR(100), this, "描述");

    /**
     * Create a <code>indexBot.ecology</code> table reference
     */
    public Ecology() {
        this(DSL.name("ecology"), null);
    }

    /**
     * Create an aliased <code>indexBot.ecology</code> table reference
     */
    public Ecology(String alias) {
        this(DSL.name(alias), ECOLOGY);
    }

    /**
     * Create an aliased <code>indexBot.ecology</code> table reference
     */
    public Ecology(Name alias) {
        this(alias, ECOLOGY);
    }

    private Ecology(Name alias, Table<EcologyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ecology(Name alias, Table<EcologyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ecology(Table<O> child, ForeignKey<O, EcologyRecord> key) {
        super(child, key, ECOLOGY);
    }

    @Override
    public Schema getSchema() {
        return Indexbot.INDEXBOT;
    }

    @Override
    public UniqueKey<EcologyRecord> getPrimaryKey() {
        return Keys.KEY_ECOLOGY_PRIMARY;
    }

    @Override
    public List<UniqueKey<EcologyRecord>> getKeys() {
        return Arrays.<UniqueKey<EcologyRecord>>asList(Keys.KEY_ECOLOGY_PRIMARY);
    }

    @Override
    public Ecology as(String alias) {
        return new Ecology(DSL.name(alias), this);
    }

    @Override
    public Ecology as(Name alias) {
        return new Ecology(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ecology rename(String name) {
        return new Ecology(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ecology rename(Name name) {
        return new Ecology(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, Long, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
