/*
 * This file is generated by jOOQ.
 */
package com.scomarlf.generated.tables.records;


import com.scomarlf.generated.tables.Dictionary;
import com.scomarlf.generated.tables.interfaces.IDictionary;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictionaryRecord extends UpdatableRecordImpl<DictionaryRecord> implements Record4<String, String, String, Integer>, IDictionary {

    private static final long serialVersionUID = -1068569787;

    /**
     * Setter for <code>indexBot.dictionary.id</code>. 主键
     */
    @Override
    public void setId(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>indexBot.dictionary.id</code>. 主键
     */
    @Override
    public String getId() {
        return (String) get(0);
    }

    /**
     * Setter for <code>indexBot.dictionary.parentId</code>. 父级主键
     */
    @Override
    public void setParentid(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>indexBot.dictionary.parentId</code>. 父级主键
     */
    @Override
    public String getParentid() {
        return (String) get(1);
    }

    /**
     * Setter for <code>indexBot.dictionary.label</code>. 名
     */
    @Override
    public void setLabel(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>indexBot.dictionary.label</code>. 名
     */
    @Override
    public String getLabel() {
        return (String) get(2);
    }

    /**
     * Setter for <code>indexBot.dictionary.sort</code>. 排序
     */
    @Override
    public void setSort(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>indexBot.dictionary.sort</code>. 排序
     */
    @Override
    public Integer getSort() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Dictionary.DICTIONARY.ID;
    }

    @Override
    public Field<String> field2() {
        return Dictionary.DICTIONARY.PARENTID;
    }

    @Override
    public Field<String> field3() {
        return Dictionary.DICTIONARY.LABEL;
    }

    @Override
    public Field<Integer> field4() {
        return Dictionary.DICTIONARY.SORT;
    }

    @Override
    public String component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getParentid();
    }

    @Override
    public String component3() {
        return getLabel();
    }

    @Override
    public Integer component4() {
        return getSort();
    }

    @Override
    public String value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getParentid();
    }

    @Override
    public String value3() {
        return getLabel();
    }

    @Override
    public Integer value4() {
        return getSort();
    }

    @Override
    public DictionaryRecord value1(String value) {
        setId(value);
        return this;
    }

    @Override
    public DictionaryRecord value2(String value) {
        setParentid(value);
        return this;
    }

    @Override
    public DictionaryRecord value3(String value) {
        setLabel(value);
        return this;
    }

    @Override
    public DictionaryRecord value4(Integer value) {
        setSort(value);
        return this;
    }

    @Override
    public DictionaryRecord values(String value1, String value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IDictionary from) {
        setId(from.getId());
        setParentid(from.getParentid());
        setLabel(from.getLabel());
        setSort(from.getSort());
    }

    @Override
    public <E extends IDictionary> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DictionaryRecord
     */
    public DictionaryRecord() {
        super(Dictionary.DICTIONARY);
    }

    /**
     * Create a detached, initialised DictionaryRecord
     */
    public DictionaryRecord(String id, String parentid, String label, Integer sort) {
        super(Dictionary.DICTIONARY);

        set(0, id);
        set(1, parentid);
        set(2, label);
        set(3, sort);
    }
}
